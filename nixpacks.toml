# Nixpacks Configuration for ViuWi Next.js Application
# Optimized for Next.js 15.4.6 with React 19, pnpm, and production deployment

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
[variables]
# Use Node.js 20 for better performance and caching
NIXPACKS_NODE_VERSION = "20"

# Production environment settings
NODE_ENV = "production"
CI = "true"

# pnpm configuration for optimal caching
NPM_CONFIG_PRODUCTION = "false"  # Ensure dev deps are installed for build
PNPM_HOME = "/app/.pnpm"

# Next.js optimizations
NEXT_TELEMETRY_DISABLED = "1"  # Disable telemetry for faster builds

# =============================================================================
# BUILD PHASES
# =============================================================================

# -----------------------------------------------------------------------------
# SETUP PHASE: Install system packages and tools
# -----------------------------------------------------------------------------
[phases.setup]
# Essential packages for Node.js and Next.js builds
nixPkgs = [
  "nodejs_20",     # Node.js 20 for better performance
  "pnpm",          # pnpm package manager
  "python3",       # Required for some native dependencies
  "gcc",           # C compiler for native modules
  "pkg-config",    # Package configuration tool
  "git"            # Git for potential dependency resolution
]

# Cache pnpm global directories
cacheDirectories = [
  "/app/.pnpm",
  "/app/.pnpm-store"
]

# -----------------------------------------------------------------------------
# INSTALL PHASE: Install dependencies with optimal caching
# -----------------------------------------------------------------------------
[phases.install]
# Use frozen lockfile for consistent builds and prefer offline for speed
cmds = [
  "pnpm install --frozen-lockfile --prefer-offline"
]

# Comprehensive caching for faster subsequent builds
cacheDirectories = [
  "node_modules/.cache",           # General Node.js cache
  ".pnpm-store",                   # pnpm package store
  "/app/.pnpm",                    # pnpm home directory
  "~/.cache/pnpm",                 # Global pnpm cache
  "node_modules/.cache/webpack",   # Webpack cache
  "node_modules/.cache/@swc"       # SWC compiler cache
]

# Only include package files for optimal Docker layer caching
onlyIncludeFiles = [
  "package.json",
  "pnpm-lock.yaml",
  "pnpm-workspace.yaml"
]

# -----------------------------------------------------------------------------
# BUILD PHASE: Build the Next.js application
# -----------------------------------------------------------------------------
[phases.build]
# Build the application
cmds = [
  "pnpm run build"
]

# Cache build artifacts and compilation results
cacheDirectories = [
  ".next/cache",                   # Next.js build cache
  "node_modules/.cache",           # Node.js cache
  ".pnpm-store",                   # pnpm store
  "node_modules/.cache/webpack",   # Webpack cache
  "node_modules/.cache/@swc",      # SWC cache
  "node_modules/.cache/terser-webpack-plugin"  # Terser cache
]

# Depend on install phase
dependsOn = ["install"]

# =============================================================================
# START CONFIGURATION
# =============================================================================
[start]
# Use pnpm to start the production server
cmd = "pnpm run start"

# =============================================================================
# OPTIMIZATION NOTES
# =============================================================================
# This configuration optimizes for:
# 1. Build Speed: Node.js 20, comprehensive caching, frozen lockfile
# 2. Reliability: Consistent dependency versions, offline-first approach
# 3. Performance: Production environment, disabled telemetry
# 4. Caching: Multi-layer caching for dependencies and build artifacts
# 5. Docker Efficiency: Optimal file inclusion for layer caching
